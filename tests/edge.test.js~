QUnit.module("Edge");

/************************ Visual representation of edges ********************/
QUnit.test("the creation of an edge requires at least 2 parameters (in case nothing is provided)", assert => {

    assert.throws(
	function(){
	    new Edge();
	},
	"missing parameters"
    );
});

QUnit.test("the creation of an edge requires at least 2 parameters (in case only one is provided)", assert => {

    assert.throws(
	function(){
	    new Edge("p2t");
	},
	"missing parameters"
    );
});

QUnit.test("throws an exception when direction type isn't correct", assert => {
    assert.throws(
	function(){
	    new Edge("blabla", null);
	},
	"wrong direction"
    );
});

QUnit.test("throws an exception when the specified end is null", assert => {
    assert.throws(
	function(){
	    new Edge("p2t", null);
	},
	"wrong parameter"
    );
});

QUnit.test("throws an exception when the specified end isn't correct", assert => {
    assert.throws(
	function(){
	    new Edge("p2t", {});
	},
	"wrong parameter"
    );
});

QUnit.test("edge has a line with an arrow as support shape", assert => {
    var e = new Edge("p2t", {});

    assert.equal(e.shape.type, "link", "edga has a link as shape");
});

QUnit.test("check that a link between two places is forbidden", assert => {
    assert.throws(
	function(){
	    new Edge("p2t", {type: "place"}, {type: "place"});
	},
	"link between two places is forbidden"
    );
});

QUnit.test("check that a link between two transition is forbidden", assert => {
    assert.throws(
	function(){
	    new Edge("p2t", {type: "transition"}, {type: "transition"});
	},
	"link between two transitions is forbidden"
    );
});

/*
QUnit.test("an edge of type p2t is drawn from the place to the transition", assert => {

});

QUnit.test("an edge of type t2p is drawn from the transition to the place", assert => {

});
*/


/* call a method to specify the second end of the edge */
