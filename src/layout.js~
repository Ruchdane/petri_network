const space = 3
class Layout{
    constructor(cellW, cellH, gridW, gridH){
	var i;
	if(!cellW || !cellH || !gridW || !gridH)
	    throw new Error("wrong parameters");

	this.cellW = cellW;
	this.cellH = cellH;
	this.ncols = Math.floor(gridW/cellW);
	this.nligs = Math.floor(gridH/cellH);
	this.grid = [];
	for(i = 0; i < this.ncols*this.nligs; i++)
	    this.grid.push(0);
    }

    getClosestPosition(orientation, originX, originY) {
	var obj = {x: -1, y: -1}, pos1, pos2, i;

	if((orientation != 'west'  &&  orientation != 'east' &&
	    orientation != 'north' &&  orientation != 'south') ||
	  originX < 0 || originY < 0 || originX >= this.ncols || originY >= this.nligs)
	    return obj;
	
	if(orientation == 'west'){
	    if(originX+space >= this.ncols)
		return obj;
	    
	    for(i=0; i < this.nligs-originY; i++){
		pos1 = originY-i;
		pos2 = originY+i;

		console.log('pos1='+pos1+' pos2='+pos2);
		
		if(pos1 >= 0){
		    pos1 = this.ncols*pos1+originX+space;
		    if(!this.grid[pos1]){
			obj.x = originX+space;
			obj.y = originY-i;
			break;
		    }
		}				

		if(pos2 < this.nligs){
		    pos2 = this.ncols*pos2+originX+space;
				    
		    if(!this.grid[pos2]){
			obj.x = originX+space;
			obj.y = originY+i;
			break;
		    }
		}
	    }
	}else if(orientation == 'north'){
	    
	}
	
	return obj;
    }

    clear (){
	var i;
	for(i=0; i< this.grid.length; i++)
	    this.grid[i] = 0;
    }

    mark(col, lig){
	this.grid[lig*this.ncols+col] = 1;
    }

    umark(col, lig){
	this.grid[lig*this.ncols+col] = 0;
    }
}
